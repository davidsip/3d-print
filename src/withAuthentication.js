import React from 'react';
import { firebase } from './firebase/index';
import PropTypes from 'prop-types';

// Higher order component. Convention is to use withComponent name
// recall convention for components is capitol first letter so
// pay attention to withAuthentication and WithAuthentication
//
// Define a component that returns a component
// 
const withAuthentication = (Component) =>{

	class WithAuthentication extends React.Component{
		constructor(props){
			super(props);

			this.state={
				authUser: null,
			};
		}

		getChildContext() {
			return {
				authUser: this.state.authUser,
			};
		}

		componentDidMount(){
			firebase.auth.onAuthStateChanged(authUser => {
				authUser
					? this.setState(() => ({ authUser }))
					: this.setState(() => ({ authUser: null}))
			});
		}

		render(){
			return(
				<Component />
			);
    }
	}

  WithAuthentication.childContextTypes = {
     authUser: PropTypes.object,
  };

  // return component class generated by function
  return WithAuthentication;
}

// export Higher Order Component
export default withAuthentication;

/*
index.js:2177 Warning: Can only update a mounted or mounting component. 
This usually means you called setState, replaceState, or forceUpdate on 
an unmounted component. This is a no-op.
Please check the code for the WithAuthentication component.
*/